// <auto-generated />
using AnaCSharp.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AnaCSharp.DAL.Migrations
{
    [DbContext(typeof(AnaContext))]
    partial class AnaContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.2-servicing-10034")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AnaCSharp.DAL.Model.DeterminedWord", b =>
                {
                    b.Property<int>("DeterminedWordId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DeterminingStateId");

                    b.Property<int>("Number");

                    b.Property<int>("WordId");

                    b.HasKey("DeterminedWordId");

                    b.HasIndex("DeterminingStateId");

                    b.HasIndex("WordId");

                    b.ToTable("DeterminedWords");
                });

            modelBuilder.Entity("AnaCSharp.DAL.Model.DeterminingState", b =>
                {
                    b.Property<int>("DeterminingStateId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("DeterminingStateId");

                    b.ToTable("DeterminingStates");
                });

            modelBuilder.Entity("AnaCSharp.DAL.Model.DeterminingWord", b =>
                {
                    b.Property<int>("DeterminingWordId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DeterminingStateId");

                    b.Property<int>("Order");

                    b.Property<int>("WordId");

                    b.HasKey("DeterminingWordId");

                    b.HasIndex("DeterminingStateId");

                    b.HasIndex("WordId");

                    b.ToTable("DeterminingWord");
                });

            modelBuilder.Entity("AnaCSharp.DAL.Model.Word", b =>
                {
                    b.Property<int>("WordId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Label");

                    b.HasKey("WordId");

                    b.ToTable("Words");
                });

            modelBuilder.Entity("AnaCSharp.DAL.Model.DeterminedWord", b =>
                {
                    b.HasOne("AnaCSharp.DAL.Model.DeterminingState", "DeterminingState")
                        .WithMany("DeterminedWords")
                        .HasForeignKey("DeterminingStateId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AnaCSharp.DAL.Model.Word", "Word")
                        .WithMany()
                        .HasForeignKey("WordId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AnaCSharp.DAL.Model.DeterminingWord", b =>
                {
                    b.HasOne("AnaCSharp.DAL.Model.DeterminingState", "DeterminingState")
                        .WithMany("DeterminingWords")
                        .HasForeignKey("DeterminingStateId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AnaCSharp.DAL.Model.Word", "Word")
                        .WithMany()
                        .HasForeignKey("WordId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
